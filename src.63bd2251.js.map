{"version":3,"sources":["partials/task-1.js","partials/task-2.js","partials/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAIA,MAAMA,EAAQC,GAEH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACdjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAKrBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAC1DhB,OAAAA,QAAQC,QAAQa,IAarBX,EAASW,GAAgBT,QAAQY,MAAMH,GAC7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC5BnC,MAAMe,EAA4B,CAACC,EAAKC,IAAiBC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAEhGK,EAAmBC,GACd,IAAIzB,QAAQ,CAACC,EAASyB,KAEnB5B,MAAAA,EAAQoB,EAA0B,IAAK,KAE7ChB,WAAW,KACYmB,KAAKE,SAAW,GAG/BtB,EAAQwB,EAAYE,GAAI7B,GAExB4B,EAAOD,EAAYE,KAExB7B,KAKL8B,EAAa,CAACD,EAAIvB,KAAWC,QAAQC,mBAAmBqB,kBAAmBvB,QAC3EyB,EAAWF,IAAQtB,QAAQyB,qCAAqCH,+BAEtEH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAQxB,KAAKqB,GAAaI,MAAMH,GAClEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAOxB,KAAKqB,GAAaI,MAAMH,GACjEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAQxB,KAAKqB,GAAaI,MAAMH;;AC1BlE,aAHA,QAAA,oBACA,QAAA,qBACA,QAAA,qBACA,QAAA","file":"src.63bd2251.js","sourceRoot":"../src","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n    // Твой код\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// Задание 2 \n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию\n// callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true  },\n    { name: 'Lux', active: false },\n];\n\n//Variant 1\n\nconst toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user);\n    return Promise.resolve(updatedUsers);\n};\n\n//Variant 2\n\n// const toggleUserState = (allUsers, userName) => {\n//     return new Promise((resolve) => {\n//         const updatedUsers = allUsers.map(user =>\n//             user.name === userName ? { ...user, active: !user.active } : user);\n//         resolve(updatedUsers);\n//     });\n// };\n\nconst logger = updatedUsers => console.table(updatedUsers);\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger); ","// Задание 3 Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции\n// onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => { return Math.floor(Math.random() * (max - min + 1) + min); };\n\nconst makeTransaction = (transaction) => { \n    return new Promise((resolve, reject) => {\n        \n        const delay = randomIntegerFromInterval(200, 500);\n       \n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n     \n            if (canProcess) {\n                resolve(transaction.id, delay);\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n\n};\n\nconst logSuccess = (id, time) => { console.log(`Transaction ${id} processed in ${time}ms`); };\nconst logError = id => { console.warn(`Error processing transaction ${id}. Please try again later.`); };\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }) .then(logSuccess) .catch(logError);\nmakeTransaction({ id: 72, amount: 75 }) .then(logSuccess) .catch(logError);\nmakeTransaction({ id: 73, amount: 100 }) .then(logSuccess) .catch(logError);\n","import './sass/main.scss';\nimport './partials/task-1';\nimport './partials/task-2';\nimport './partials/task-3';\n"]}